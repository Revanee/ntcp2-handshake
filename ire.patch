diff --git a/Cargo.lock b/Cargo.lock
index 54815b9..23d476f 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -108,6 +108,12 @@ version = "0.1.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "349a06037c7bf932dd7e7d1f653678b2038b9ad46a74102f1fc7bd7872678cce"
 
+[[package]]
+name = "base64"
+version = "0.21.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "604178f6c5c21f02dc555784810edfb88d34ac2c73b2eae109655649ee73ce3d"
+
 [[package]]
 name = "base64ct"
 version = "1.5.3"
@@ -1077,6 +1083,7 @@ version = "0.0.1"
 dependencies = [
  "aes",
  "arrayref",
+ "base64",
  "bloom-filter-rs",
  "bytes",
  "cbc",
diff --git a/Cargo.toml b/Cargo.toml
index c57a487..4d48cd7 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -63,6 +63,7 @@ config = { version = "0.13", default-features = false, features = ["toml"] }
 # CLI dependencies
 clap = { version = "4", optional = true }
 env_logger = { version = "0.10", optional = true }
+base64 = "0.21.2"
 
 [dev-dependencies]
 pretty_assertions = "1.3"
diff --git a/examples/router.toml b/examples/router.toml
index b9aefaf..01dab04 100644
--- a/examples/router.toml
+++ b/examples/router.toml
@@ -11,7 +11,7 @@
 
 [reseed]
 # Control whether the router will reseed if it is low on peers.
-enable = true
+enable = false
 
 # General transport configuration.
 # Individual transports are configured in [transport.NAME] sections.
@@ -26,4 +26,3 @@ listen = "127.0.0.1:12345"
 listen = "127.0.0.1:12346"
 # Where NTCP2 should write its key material.
 keyfile = "ntcp2.keys.dat"
-
diff --git a/src/transport/ntcp2/mod.rs b/src/transport/ntcp2/mod.rs
index c7e463e..7012fc6 100644
--- a/src/transport/ntcp2/mod.rs
+++ b/src/transport/ntcp2/mod.rs
@@ -27,6 +27,7 @@
 //!
 //! [NTCP2 specification](https://geti2p.net/spec/ntcp2)
 
+use base64::Engine;
 use bytes::BytesMut;
 use cookie_factory::GenError;
 use futures::{
@@ -671,6 +672,12 @@ impl<D: Distributor> Manager<D> {
         let aesobfse_key = own_rid.hash().0;
         let aesobfse_iv = self.aesobfse_iv;
 
+        let b64 = base64::engine::general_purpose::STANDARD;
+        println!("NTCP2 Info:");
+        println!("\tPublic key: {}", b64.encode(&self.static_public_key));
+        println!("\tAES Key (Router Hash): {}", b64.encode(&own_rid.hash().0));
+        println!("\tAES IV: {}", b64.encode(&self.aesobfse_iv));
+
         // Give each incoming connection the references it needs
         let session_refs = self.session_manager.refs();
         let conns = listener.incoming().zip(session_refs);
